function showWormPostureDirection(worm)
%SHOWWORMPOSTUREDIRECTION Show the worm posture direction.
%
%   SHOWWORMPOSTUREDIRECTION(WORM)
%
%   Inputs:
%       worm - the worm to show
%
%   See WORMORGANIZATION
%
%
% © Medical Research Council 2012
% You will not remove any copyright or other notices from the Software; 
% you must reproduce all copyright notices and other proprietary 
% notices on any copies of the Software.

% Create a figure.
h = figure;
set(h, 'units', 'normalized', 'position', [0 0 1 1]);
hold on;

% Show the worm posture direction.
subplot(1, 2, 1);
hold on;
data = { ...
    worm.posture.directions.tail2head, ...
    worm.posture.directions.head, ...
    worm.posture.directions.tail};
samples = sum(~isnan(data{1}));
resolution = 3;
resolutions = { ...
    resolution, ...
    resolution, ...
    resolution};
titleName = ['WORM POSTURE DIRECTION (N = ' num2str(samples) ')'];
xAxisName = 'Direction Angle (degrees)';
means = cellfun(@nanmean, data);
stdDevs = cellfun(@nanstd, data);
dataNames = { ...
    ['Worm Direction (Mean = ' num2str(means(1)) ...
    ', Std = ' num2str(stdDevs(1)) ')'], ...
    ['Head Direction (Mean = ' num2str(means(2)) ...
    ', Std = ' num2str(stdDevs(2)) ')'], ...
    ['Tail Direction (Mean = ' num2str(means(3)) ...
    ', Std = ' num2str(stdDevs(3)) ')']};
histColors = { ...
    [0 0 0], ...
    [0 .75 0], ...
    [.75 0 0]};
statColors = { ...
    [.5 .5 .5], ...
    [0 1 0], ...
    [1 0 0]};
plotHistogram(data, resolutions, titleName, xAxisName, dataNames, ...
    histColors, statColors, 1);

% Determine the locomotion mode.
motionMode = worm.locomotion.motion.mode;

% Create a figure.
h = figure;
set(h, 'units', 'normalized', 'position', [0 0 1 1]);
hold on;

% Show the worm's forward/pause/backward bend posture mean/standard deviation.
motionModes = { ...
    1, ...
    0, ...
    -1};
motionNames = { ...
    'FORWARD', ...
    'PAUSED', ...
    'BACKWARD'};
for i = 1:length(bendFields) % mean/standard deviation
    for j = 1:length(motionModes) % forward/paused/backward
        
        % Determine the plot location.
        subplot(length(bendFields), length(motionModes), ...
            (i - 1) * length(motionModes) + j);
        hold on;
        
        % Compute the data.
        data = { ...
            worm.posture.bends.head.(bendFields{i})( ...
            motionMode == motionModes{j}), ...
            worm.posture.bends.neck.(bendFields{i})( ...
            motionMode == motionModes{j}), ...
            worm.posture.bends.midbody.(bendFields{i})( ...
            motionMode == motionModes{j}), ...
            worm.posture.bends.hips.(bendFields{i})( ...
            motionMode == motionModes{j}), ...
            worm.posture.bends.tail.(bendFields{i})( ...
            motionMode == motionModes{j})};
        samples = sum(~isnan(data{1}));
        resolutions = { ...
            bendResolutions{i}, ...
            bendResolutions{i}, ...
            bendResolutions{i}, ...
            bendResolutions{i}, ...
            bendResolutions{i}};
        
        % Construct the labels.
        titleName = ['WORM ' motionNames{j} ' POSTURE BEND ' ...
            bendNames{i} ' (N = ' num2str(samples) ')'];
        xAxisName = 'Supplementary Angle (degrees)';
        means = cellfun(@nanmean, data);
        stdDevs = cellfun(@nanstd, data);
        dataNames = { ...
            ['Head Bends (Mean = ' num2str(means(1)) ...
            ', Std = ' num2str(stdDevs(1)) ')'], ...
            ['Neck Bends (Mean = ' num2str(means(2)) ...
            ', Std = ' num2str(stdDevs(2)) ')'], ...
            ['Midbody Bends (Mean = ' num2str(means(3)) ...
            ', Std = ' num2str(stdDevs(3)) ')'], ...
            ['Hip Bends (Mean = ' num2str(means(4)) ...
            ', Std = ' num2str(stdDevs(4)) ')'], ...
            ['Tail Bends (Mean = ' num2str(means(5)) ...
            ', Std = ' num2str(stdDevs(5)) ')']};
        
        % Construct the data colors.
        histColors = { ...
            [.75 0 0], ...
            [1 .5 .75], ...
            [0 .75 0], ...
            [.5 .75 1], ...
            [0 0 .75]};
        statColors = { ...
            [1 0 0], ...
            [1 .8 .9], ...
            [.5 .5 .5], ...
            [.8 .9 1], ...
            [0 0 1]};
        
        % Do we have any data?
        if isempty(data{1})
            title(titleName);
            text(0.5, 0.5, '\bf\color{red}NO DATA', ...
                'HorizontalAlignment', 'center', ...
                'VerticalAlignment', 'middle');
            continue;
        end
        
        % Plot the data.
        plotHistogram(data, resolutions, titleName, xAxisName, ...
            dataNames, histColors, [], 2);
    end
end
end
