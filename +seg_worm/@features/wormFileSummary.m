function summary = wormFileSummary()
%WORMFILESUMMARY Get a summary of the worm experiment analysis file.
%
%   WORMFILESUMMARY
%
%   Output:
%       summary - the worm file summary;
%                 a struct, identically organized to the ones found in the
%                 worm experiment analysis files, where every terminal
%                 value field contains a descriptive summary.
%                 For experimental annotations, within the top-level struct
%                 "info", the summary is simply a string. For analyzed
%                 values, within the top-level struct "worm", the summary
%                 is a struct with the fields:
%
%                 summary    = a descriptive summary of the value
%                 method     = a descriptive summary of the method
%                 references = reference publications for the method
%
%
% © Medical Research Council 2012
% You will not remove any copyright or other notices from the Software; 
% you must reproduce all copyright notices and other proprietary 
% notices on any copies of the Software.

%% *** EXPERIMENTAL ANNOTATION

%% The WT2 information.
wt2 = struct( ...
    'tracker', 'The WT2 tracker software version.', ...
    'hardware', 'The WT2 tracker hardware version.', ...
    'analysis', 'The WT2 tracker analysis version.', ...
    'annotations', 'Additional WT2 system annotations (if any exist).');


%% The video information.
% The microns/pixels.
videoLength = struct( ...
    'frames', 'The video frame length.', ...
    'time', 'The video time length.');
micronsPerPixels = struct( ...
    'x', 'The video''s x-axis microns/pixels resolution.', ...
    'y', 'The video''s y-axis microns/pixels resolution.');
resolution = struct( ...
    'fps', 'The video''s frames/second resolution.', ...
    'height', 'The video''s pixel height resolution.', ...
    'width', 'The video''s pixel width resolution.', ...
    'micronsPerPixels', micronsPerPixels, ...
    'fourcc', 'The video codec''s FOURCC (four character code).');
videoAnnotations = struct( ...
    'frames', ['The video annotation codes, per frame (e.g., 1 = the ' ...
    'worm was succesfully extracted from the image, 2 = the video ' ...
    'lost the image, 3 = the stage moved during the video frame, ...).'], ...
    'reference', 'A reference explaining the video frame annotation codes.');
video = struct( ...
    'length', videoLength, ...
    'resolution', resolution, ...
    'annotations', videoAnnotations);



%% The experiment information.
expFiles = struct( ...
    'video', 'The full path for the experiment''s video file.', ...
    'vignette', ['The full path for the experiment''s video, ' ...
    'vignette-correction file (if one exists).'], ...
    'info', 'The full path for the experiment''s information file.', ...
    'stage', 'The full path for the experiment''s stage movement file.', ...
    'directory', 'The full path for the experiment''s directory.', ...
    'computer', 'The computer name and IP address for the experiment.');
expWorm = struct( ...
    'timestamp', 'The timestamp when the experiment began.', ...
    'genotype', 'The worm''s genotype.', ...
    'gene', 'The worm''s gene mutation(s) (if any exist).', ...
    'allele', ['The worm''s allelic variants for its gene mutation(s) ' ...
    '(if any exist).'], ...
    'strain', 'The worm''s strain.', ...
    'food', 'The worm''s food during the experiment (e.g., "OP50").', ...
    'ventralSide', ['The worm''s ventral side, in the video, relative ' ...
    'to its head (e.g., "clockwise" if the ventral side is clockwise ' ...
    'from the head in video).'], ...
    'agarSide', ['The side on which the worm is crawling (e.g. "left" ' ...
    'if the worm is crawling on its left side.'], ...
    'sex', ['The worm''s gender (e.g. "XX" for hemaphrodites and "XO" ' ...
    'for males).'], ...
    'age', 'The worm''s age (e.g. "L1", "young adult", ...).', ...
    'illumination', 'The illumination used (e.g., "627nm").', ...
    'temperature', 'The temperature during the experiment (e.g., "22C").', ...
    'chemicals', ['The chemicals used during the experiment (e.g. ' ...
    '"1mM dopamine").'], ...
    'arena', 'The experiment arena (e.g. "low-peptone NGM plate").', ...
    'tracker', 'The tracker used (if you own more than one).', ...
    'experimenter', 'The experimenter (e.g., "Eviatar Yemini").', ...
    'lab', ['The lab in which the experiment was performed (e.g., ' ...
    '"William R Schafer").'], ...
    'address', ['The address where the experiment took place (e.g. ' ...
    '"Room S220, MRC Laboratory of Molecular Biology, Hills Road, ' ...
    'Cambridge, CB2 0NT, UK").'], ...
    'annotations', 'Additional experimental annotations (if any exist).');
experiment = struct( ...
    'worm', expWorm, ...
    'files', expFiles);



%% The overall information
info = struct( ...
    'wt2', wt2, ...
    'video', video, ...
    'experiment', experiment);



%% *** ANALYZED VALUES

%% The worm morphology data.

% The worm widths.
headWidths = struct( ...
    'summary', 'The head''s width (in microns), per frame.', ...
    'method', 'The mean of the widths at the front 1/6 of the worm.', ...
    'references', []);
tailWidths = struct( ...
    'summary', 'The tail''s width (in microns), per frame.', ...
    'method', 'The mean of the widths at the back 1/6 of the worm.');
tailWidths = struct( ...
    'summary', 'The tail''s width (in microns), per frame.', ...
    'method', 'The mean of the widths at the back 1/6 of the worm.');
widths = struct( ...
    'head', headWidths, ...
    'midbody', midbodyWidths, ...
    'tail', tailWidths);

%% The worm morphology.
lengths = struct( ...
    'summary', 'The worm''s length (in microns), per frame.', ...
    'method', ['The chain-code pixel length of the skeleton converted ' ...
    'to microns.']);
areas = struct( ...
    'summary', 'The worm''s area (in microns squared), per frame.', ...
    'method', ['The pixel area, bounded by the worm contour, converted ' ...
    'to microns.']);
fatness = struct( ...
    'summary', 'The worm''s area/length (in microns), per frame.', ...
    'method', ['The area/length (computation of these values is ' ...
    'described in the relevant "morphology" sections).']);
thickness = struct( ...
    'summary', ['The worm''s width/length (a unitless measure), per ' ...
    'frame.'], ...
    'method', ['The width/length (computation of these values is ' ...
    'described in the relevant "morphology" sections).']);
morphology = struct( ...
    'length', lengths, ...
    'width', widths, ...
    'area', areas, ...
    'areaPerLength', fatness, ...
    'widthPerLength', thickness);



%% The worm posture data.

% The worm posture bends.
headPosMeanBends = struct( ...
    'summary', ['The mean of the worm''s bend posture (in degrees), ' ...
    'at the head, per frame.'], ...
    'method', ['The mean of the supplementary angles across the front ' ...
    '1/6 of the worm.']);
headPosStdDevBends = struct( ...
    'summary', ['The standard deviation of the worm''s bend posture ' ...
    '(in degrees), at the head, per frame.'], ...
    'method', ['The standard deviation of the supplementary angles ' ...
    'across the front 1/6 of the worm.']);
headPosBends = struct( ...
    'mean', headPosMeanBends, ...
    'stdDev', headPosStdDevBends);
neckPosMeanBends = struct( ...
    'summary', ['The mean of the worm''s bend posture (in degrees), ' ...
    'at the neck, per frame.'], ...
    'method', ['The mean of the supplementary angles across the front ' ...
    '1/6 to 2/6 of the worm.']);
neckPosStdDevBends = struct( ...
    'summary', ['The standard deviation of the worm''s bend posture ' ...
    '(in degrees), at the neck, per frame.'], ...
    'method', ['The standard deviation of the supplementary angles ' ...
    'across the front 1/6 to 2/6 of the worm.']);
neckPosBends = struct( ...
    'mean', neckPosMeanBends, ...
    'stdDev', neckPosStdDevBends);
midbodyPosMeanBends = struct( ...
    'summary', ['The mean of the worm''s bend posture (in degrees), ' ...
    'at the midbody, per frame.'], ...
    'method', ['The mean of the supplementary angles across the middle ' ...
    '1/3 to 2/3 of the worm.']);
midbodyPosStdDevBends = struct( ...
    'summary', ['The standard deviation of the worm''s bend posture ' ...
    '(in degrees), at the midbody, per frame.'], ...
    'method', ['The standard deviation of the supplementary angles ' ...
    'across the middle 1/3 to 2/3 of the worm.']);
midbodyPosBends = struct( ...
    'mean', midbodyPosMeanBends, ...
    'stdDev', midbodyPosStdDevBends);
hipsPosMeanBends = struct( ...
    'summary', ['The mean of the worm''s bend posture (in degrees), ' ...
    'at the hips, per frame.'], ...
    'method', ['The mean of the supplementary angles across the back ' ...
    '1/6 to 2/6 of the worm.']);
hipsPosStdDevBends = struct( ...
    'summary', ['The standard deviation of the worm''s bend posture ' ...
    '(in degrees), at the hips, per frame.'], ...
    'method', ['The standard deviation of the supplementary angles ' ...
    'across the back 1/6 to 2/6 of the worm.']);
hipsPosBends = struct( ...
    'mean', hipsPosMeanBends, ...
    'stdDev', hipsPosStdDevBends);
tailPosMeanBends = struct( ...
    'summary', ['The mean of the worm''s bend posture (in degrees), ' ...
    'at the tail, per frame.'], ...
    'method', ['The mean of the supplementary angles across the back ' ...
    '1/6 of the worm.']);
tailPosStdDevBends = struct( ...
    'summary', ['The standard deviation of the worm''s bend posture ' ...
    '(in degrees), at the tail, per frame.'], ...
    'method', ['The standard deviation of the supplementary angles ' ...
    'across the back 1/6 of the worm.']);
tailPosBends = struct( ...
    'mean', tailPosMeanBends, ...
    'stdDev', tailPosStdDevBends);
postureBends = struct( ...
    'head', headPosBends, ...
    'neck', neckPosBends, ...
    'midbody', midbodyPosBends, ...
    'hips', hipsPosBends, ...
    'tail', tailPosBends);

% The worm amplitudes.
maximumAmpPosture = struct( ...
    'summary', ['The maximum amplitude (in microns) present in the ' ...
    'worm posture.'], ...
    'method', '');
ratioAmpPosture = struct( ...
    'summary', ['The ratio between the maximum amplitudes on either ' ...
    'side of the worm (a unitless measure). The smaller amplitude of ' ...
    'the two is the numerator and the larger amplitude is the ' ...
    'denomiator.'], ...
    'method', '');
postureAmplitudes = struct( ...
    'max', maximumAmpPosture, ...
    'ratio', ratioAmpPosture);

% The worm wavelengths.
wavelength1 = struct( ...
    'summary', 'The primary wavelength present in the worm''s posture.', ...
    'method', '');
wavelength2 = struct( ...
    'summary', ['The secondary wavelength present in the worm''s ' ...
    'posture (if one exists).', ...
    'method', '');
wavelengths = struct( ...
    'primary', wavelength1, ...
    'secondary', wavelength2);

% The worm coils.
coilStartFrames = struct( ...
    'summary', 'The starting frame number per worm coil event.', ...
    'method', ['Frames where the worm is coiled are determined by ' ...
    'searching for a run of segmentation failures bracketed by ' ...
    'annotations indicating failures as a result of not finding both ' ...
    'a head and tail or, finding a large mismatch between the lengths ' ...
    'on either side of the worm''s contour. This run of failures must ' ...
    'exceed 1/5 of a second.']);
coilEndFrames = struct( ...
    'summary', 'The ending frame number per worm coil event.', ...
    'method', ['Frames where the worm is coiled are determined by ' ...
    'searching for a run of segmentation failures bracketed by ' ...
    'annotations indicating failures as a result of not finding both ' ...
    'a head and tail or, finding a large mismatch between the lengths ' ...
    'on either side of the worm''s contour. This run of failures must ' ...
    'exceed 1/5 of a second.']);
coilTimes = struct( ...
    'summary', 'The time (in seconds) per worm coil event.', ...
    'method', ['Frames where the worm is coiled are determined by ' ...
    'searching for a run of segmentation failures bracketed by ' ...
    'annotations indicating failures as a result of not finding both ' ...
    'a head and tail or, finding a large mismatch between the lengths ' ...
    'on either side of the worm''s contour. This run of failures must ' ...
    'exceed 1/5 of a second.']);
coilInterTimes = struct( ...
    'summary', ['The time (in seconds), from the end of each worm ' ...
    'coiling event, till the next one took place.'], ...
    'method', ['Frames where the worm is coiled are determined by ' ...
    'searching for a run of segmentation failures bracketed by ' ...
    'annotations indicating failures as a result of not finding both ' ...
    'a head and tail or, finding a large mismatch between the lengths ' ...
    'on either side of the worm''s contour. This run of failures must ' ...
    'exceed 1/5 of a second.']);
coilInterDistances = struct( ...
    'summary', ['The distance traveled (in microns), from the end of ' ...
    'each worm coiling event, till the next one took place.'], ...
    'method', ['Frames where the worm is coiled are determined by ' ...
    'searching for a run of segmentation failures bracketed by ' ...
    'annotations indicating failures as a result of not finding both ' ...
    'a head and tail or, finding a large mismatch between the lengths ' ...
    'on either side of the worm''s contour. This run of failures must ' ...
    'exceed 1/5 of a second.']);
coilFrames = struct( ...
    'start', coilStartFrames, ...
    'end', coilEndFrames, ...
    'time', coilTimes, ...
    'interTime', coilInterTimes, ...
    'interDistance', coilInterDistances);
coilFrequency = struct( ...
    'summary', 'The frequency (in hertz) of coiling events.', ...
    'method', 'The number of coiling events divided by the video length.');
coilTimeRatio = struct( ...
    'summary', ['The ratio of time (a unitless measure) the worm ' ...
    'spent coiled.'], ...
    'method', 'The sum of the coiling times divided by the video length.');
coils = struct( ...
    'frames', coilFrames, ...
    'frequency', coilFrequency, ...
    'timeRatio', coilTimeRatio);

% The worm posture directions.
tailToHeadDirection = struct( ...
    'summary', 'The direction the worm is facing (in degrees).', ...
    'method', ['The direction the worm is facing is measured as ' ...
    'as the angle from its head to its tail (which acts as the ' ...
    'origin). The head and tail are defined as the centroids of the ' ...
    'front and back 1/12 of the worm.']);
headPosDirection = struct( ...
    'summary', 'The direction the worm''s head is facing (in degrees).', ...
    'method', ['The direction the worm''s head is facing is measured as ' ...
    'as the mean angle across its head starting at 1/6 the body and ' ...
    'extending to the tip.']);
tailPosDirection = struct( ...
    'summary', 'The direction the worm''s tail is facing (in degrees).', ...
    'method', ['The direction the worm''s tail is facing is measured as ' ...
    'as the mean angle across its head starting at 1/6 the body and ' ...
    'extending to the tip.']);
postureDirections = struct( ...
    'tail2head', tailToHeadDirection, ...
    'head', headPosDirection, ...
    'tail', tailPosDirection);

% The worm posture skeletons.
% Note: the orientation is from head to tail in the rows; row 1 is the
% head, the end row is the tail. Each frame is represented by a column.
postureXSkeletons = struct( ...
    'summary', 'The worm''s x-axis skeleton coordinates (in microns).', ...
    'method', ['The worm''s x-axis skeleton coordinates are segmented ' ...
    'from the video. Each row represents a point on the skeleton; ' ...
    'row 1 is the head and the last row is the tail. Each column ' ...
    'represents a frame. Unsegmented frames are represented by column ' ...
    'filled with NaNs.']);
postureYSkeletons = struct( ...
    'summary', 'The worm''s y-axis skeleton coordinates (in microns).', ...
    'method', ['The worm''s y-axis skeleton coordinates are segmented ' ...
    'from the video. Each row represents a point on the skeleton; ' ...
    'row 1 is the head and the last row is the tail. Each column ' ...
    'represents a frame. Unsegmented frames are represented by column ' ...
    'filled with NaNs.']);
postureSkeletons = struct( ...
    'x', postureXSkeletons, ...
    'y', postureYSkeletons);

% The worm eigen projections.
% Note: the eigen projections are oriented, by their contribution, in rows;
% row 1 accounts for the most variance. Each frame is represented by a
% column.
eigenProjections = struct( ...
    'summary', 'The eigen projections of the worm (a unitless measure).', ...
    'method', ['The worm is transformed into an orientation-invariant ' ...
    'postural representation as the angles between each subsequent ' ...
    'skeleton point. A wild-type PCA (principal components analysis) ' ...
    'of N2 shapes provides the eigen basis. The worm''s posture is '
    'projected into a lower dimensional space that accounts for ' ...
    'roughly 95% of the variance in N2 shapes. Another way of looking ' ...
    'at this is that the worm shape is compressed with roughly 5% ' ...
    'loss. See "" by Stephens et al., 2008.');

%% The worm posture.
trackLength = struct( ...
    'summary', ['The length of the line (in microns) extending from ' ...
    'the worm''s head to its tail'], ...
    'method', '');
eccentricity = struct( ...
    'summary', ['The eccentricity (circularness) of the worm''s body ' ...
    '(a unitless measure from just above 0, representing, to 1, representing  ).'], ...
    'method', '');
kinks = struct( ...
    'summary', 'The number of kinks in the worm''s posture.', ...
    'method', '');
posture = struct( ...
    'bends', postureBends, ...
    'amplitude', postureAmplitudes, ...
    'wavelength', wavelengths, ...
    'tracklength', trackLength, ...
    'eccentricity', eccentricity, ...
    'kinks', kinks, ...
    'coils', coils, ...
    'directions', postureDirections, ...
    'skeleton', postureSkeletons, ...
    'eigenProjection', eigenProjections);



%% The worm locomotion data.

% The worm forward motion.
forwardFrames = struct( ...
    'start', forwardStartFrames, ...
    'end', forwardEndFrames, ...
    'time', forwardTimes, ...
    'distance', forwardDistances, ...
    'interTime', forwardInterTimes, ...
    'interDistance', forwardInterDistances);
forwardRatios = struct( ...
    'time', forwardTimeRatio, ...
    'distance', forwardDistanceRatio);
forward = struct( ...
    'frames', forwardFrames, ...
    'frequency', forwardFrequency, ...
    'ratio', forwardRatios);

% The worm backward motion.
backwardFrames = struct( ...
    'start', backwardStartFrames, ...
    'end', backwardEndFrames, ...
    'time', backwardTimes, ...
    'distance', backwardDistances, ...
    'interTime', backwardInterTimes, ...
    'interDistance', backwardInterDistances);
backwardRatios = struct( ...
    'time', backwardTimeRatio, ...
    'distance', backwardDistanceRatio);
backward = struct( ...
    'frames', backwardFrames, ...
    'frequency', backwardFrequency, ...
    'ratio', backwardRatios);

% The worm paused motion.
pausedFrames = struct( ...
    'start', pausedStartFrames, ...
    'end', pausedEndFrames, ...
    'time', pausedTimes, ...
    'distance', pausedDistances, ...
    'interTime', pausedInterTimes, ...
    'interDistance', pausedInterDistances);
pausedRatios = struct( ...
    'time', pausedTimeRatio, ...
    'distance', pausedDistanceRatio);
paused = struct( ...
    'frames', pausedFrames, ...
    'frequency', pausedFrequency, ...
    'ratio', pausedRatios);

% The worm motion.
 = struct( ...
    'summary', '', ...
    'method', '');
motion = struct( ...
    'mode', motionModes, ...
    'forward', forward, ...
    'backward', backward, ...
    'paused', paused);

% The worm velocity.
 = struct( ...
    'summary', '', ...
    'method', '');
 = struct( ...
    'summary', '', ...
    'method', '');
headTipVelocity = struct( ...
    'speed', headTipSpeed, ...
    'direction', headTipVelDirection);
headVelocity = struct( ...
    'speed', headSpeed, ...
    'direction', headVelDirection);
midbodyVelocity = struct( ...
    'speed', midbodySpeed, ...
    'direction', midbodyVelDirection);
tailVelocity = struct( ...
    'speed', tailSpeed, ...
    'direction', tailVelDirection);
tailTipVelocity = struct( ...
    'speed', tailTipSpeed, ...
    'direction', tailTipVelDirection);
velocity = struct( ...
    'headTip', headTipVelocity, ...
    'head', headVelocity, ...
    'midbody', midbodyVelocity, ...
    'tail', tailVelocity, ...
    'tailTip', tailTipVelocity);

% The worm locomotion bends.
 = struct( ...
    'summary', '', ...
    'method', '');
 = struct( ...
    'summary', '', ...
    'method', '');
foragingLocBends = struct( ...
    'amplitude', foragingAmpBends, ...
    'angleSpeed', foragingFreqBends);
headLocBends = struct( ...
    'amplitude', headAmpBends, ...
    'frequency', headFreqBends);
midbodyVelocity = struct( ...
    'amplitude', midbodyAmpBends, ...
    'frequency', midbodyFreqBends);
tailLocBends = struct( ...
    'amplitude', tailAmpBends, ...
    'frequency', tailFreqBends);
locomotionBends = struct( ...
    'foraging', headTipVelocity, ...
    'head', headLocBends, ...
    'midbody', midbodyLocBends, ...
    'tail', tailLocBends);

% The worm omega turns.
omegaFrames = struct( ...
    'start', omegaStartFrames, ...
    'end', omegaEndFrames, ...
    'time', omegaTimes, ...
    'interTime', omegaInterTimes, ...
    'interDistance', omegaInterDistances, ...
    'isVentral', isOmegaFramesVentral);

omegas = struct( ...
    'frames', omegaFrames, ...
    'frequency', omegaFrequency, ...
    'timeRatio', omegaTimeRatio);

% The worm upsilon turns.
upsilonFrames = struct( ...
    'start', upsilonStartFrames, ...
    'end', upsilonEndFrames, ...
    'time', upsilonTimes, ...
    'interTime', upsilonInterTimes, ...
    'interDistance', upsilonInterDistances, ...
    'isVentral', isUpsilonFramesVentral);
upsilons = struct( ...
    'frames', upsilonFrames, ...
    'frequency', upsilonFrequency, ...
    'timeRatio', upsilonTimeRatio);

% The worm locomotion turns.
locomotionTurns = struct( ...
    'omegas', omegas, ...
    'upsilons', upsilons);

% The worm locomotion path centroid coordinates.
 = struct( ...
    'summary', '', ...
    'method', '');
centroidCoordinates = struct( ...
    'x', centroidXCoordinates, ...
    'y', centroidYCoordinates);

% The worm locomotion path.
 = struct( ...
    'summary', '', ...
    'method', '');
locomotionPath = struct( ...
    'stdDev', pathStdDev, ...
    'skewness', pathSkewness, ...
    'kurtosis', pathKurtosis, ...
    'coordinates', centroidCoordinates);

%% The worm locomotion.
locomotion = struct( ...
    'motion', motion, ...
    'velocity', velocity, ...
    'bends', locomotionBends, ...
    'turns', locomotionTurns, ...
    'path', locomotionPath);



%% The worm data.
worm = struct(...
    'morphology', morphology, ...
    'posture', posture, ...
    'locomotion', locomotion);



%% *** THE SUMMARY
summary = struct( ...
    'info', info, ...
    'worm', worm);
end

